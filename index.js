// функция с именем "func", которая принимает три параметра: строку "s" и два символа "a" и "b". 
function func(s, a, b) {
    // Функция начинает с проверки, если строка "s" пустая, то она возвращает -1.
    if (s.match(/ ^$ /)) {
        return -1;
    }

    // Затем функция инициализирует переменную "i" со значением длины строки "s" минус 1. Также инициализирует переменные "aIndex" и "bIndex" со значением -1.
    let i = s.length - 1;
    let aIndex = -1;
    let bIndex = -1;

    // В цикле while выполняются следующие действия:

    while (aIndex == -1 && bIndex == -1 && i > 0) {
        // - Если "aIndex" и "bIndex" равны -1 (то есть не найдены), и "i" больше 0, то

        if (s.substring(i, i + 1) == a) {
            aIndex = i;
            //     - Если символ в строке "s" по индексу "i" равен символу "a", то "aIndex" присваивается значение "i".
        }
        if (s.substring(i, i + 1) == b) {
            bIndex = i;
            //     - Если символ в строке "s" по индексу "i" равен символу "b", то "bIndex" присваивается значение "i".
        }
        i = i - 1;
        //     - "i" уменьшается на 1.
    }
    // Далее, если "aIndex" не равно -1, то:
    if (aIndex != -1) {
        // - Если "bIndex" равно -1, то функция возвращает значение "aIndex".
        if (bIndex == -1) {
            return aIndex;
        } else {
            return Math.max(aIndex, bIndex);
            // - В противном случае, функция возвращает максимальное значение из "aIndex" и "bIndex" с помощью функции Math.max().
        }
    }
    if (bIndex != -1) {
        return bIndex;
        // Если "bIndex" не равно -1, то функция возвращает значение "bIndex".
    } else {
        return -1;
        // В конце, если ни "aIndex", ни "bIndex" не равны -1, то функция возвращает -1.
    }
}

function func(s, a, b) {
    if (s.match(/ ^$ /)) {
        return -1;
    }

    let i = s.length - 1;
    let aIndex = -1;
    let bIndex = -1;

    while (aIndex == -1 && bIndex == -1 && i > 0) {
        if (s.substring(i, i + 1) == a) {
            aIndex = i;
        }
        if (s.substring(i, i + 1) == b) {
            bIndex = i;
        }
        i = i - 1;
    }
    if (aIndex != -1) {
        if (bIndex == -1) {
            return aIndex;
        } else {
            return Math.max(aIndex, bIndex);
        }
    }
    if (bIndex != -1) {
        return bIndex;
    } else {
        return -1;
    }
}

// функция с тремя параметрами: s, a и b. 
function func(s, a, b) {
    // Функция проверяет, является ли строка s пустой (после удаления пробелов с помощью метода trim()), и если да, то возвращает -1.
    if (s.trim() === "") {
        return -1;
    }

    // В противном случае, функция ищет последнее вхождение символа a и сохраняет его индекс в переменную aIndex. Затем функция ищет последнее вхождение символа b и сохраняет его индекс в переменную bIndex.
    let aIndex = s.lastIndexOf(a);
    let bIndex = s.lastIndexOf(b);

    //  Если aIndex не равен -1 (то есть символ a был найден в строке), то функция возвращает максимальный индекс между aIndex и bIndex.
    if (aIndex !== -1) {
        return Math.max(aIndex, bIndex);
    } else {
        //  В противном случае, функция возвращает индекс bIndex.
        return bIndex;
    }
}


// Этот код представляет функцию `func`, которая принимает три аргумента: `s`, `a` и `b`. 
// - Аргумент `s` - это строка, элементы которой будут искаться в функции.
// - Аргументы `a` и `b` - это подстроки, которые функция будет искать в строке `s`.
function func(s, a, b) {
    if (!s) {
        return -1;
        // Функция проверяет, если `s` не определена или пуста, то она возвращает -1, обозначающую, что строка пуста или не содержит никаких символов.
    }

    const aIndex = s.lastIndexOf(a);
    const bIndex = s.lastIndexOf(b);
    // Затем функция находит последний индекс вхождения подстроки `a` в строке `s` с помощью метода `lastIndexOf()`. Аналогично, она находит последний индекс вхождения подстроки `b` в строке `s`.

    if (aIndex === -1 && bIndex === -1) {
        return -1;
        // Если оба индекса равны -1 (т.е. подстроки `a` и `b` не найдены в строке `s`), функция возвращает -1.
    }

    return Math.max(aIndex, bIndex);
    // В противном случае, функция возвращает максимальное значение из aIndex и bIndex, с использованием метода `Math.max()`. Это означает, что функция возвращает индекс последнего вхождения из двух подстрок в строку `s`.
}

// В данном контексте, aIndex и bIndex можно объявить как константы с помощью ключевого слова const, поскольку они инициализируются только один раз и их значения не изменяются в дальнейшем в коде.

// Однако, использование let или const зависит от конкретного случая. Если вам нужно изменить значение переменной в дальнейшем в коде, используйте let. Если значение переменной остается неизменным после инициализации, используйте const 

// В вашем коде, aIndex и bIndex нигде не изменяются после их инициализации, поэтому вы можете использовать const для их объявления

// Это делает код более предсказуемым и помогает предотвратить возможные ошибки, связанные с непреднамеренным изменением этих переменных.

console.log(func("Hello, world!", "o", "l")); // выводит 10
console.log(func("Hello, world!", "z", "w")); // выводит 7
console.log(func("Hello, world!", "z", "x")); // выводит -1
















